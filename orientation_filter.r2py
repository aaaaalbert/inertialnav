"""
<Program Name>
  orientation_filter.r2py

<Purpose>
  This module implements the extended Kalman filter designed by Angelo Sabatini,
  as described in his 2006 IEEE paper "Quaternion-Based Extended Kalman Filter for
  Determining Orientation by Inertial and Magnetic Sensing." The filter is meant
  to subdue the errors accumulated from integrating sensor biases when figuring
  the orientation of a device. 
  
  The orientation filter provided herein is intended to be used to locate / navigate 
  devices in environments where GPS is unavailable or imprecise, namely, indoors. 
"""


dy_import_module_symbols('extended_kalman.r2py')
dy_import_module_symbols('quaternion.r2py')
dy_import_module_symbols('matrix.r2py')
dy_import_module_symbols('serialize.r2py')

# Filter constants
GRAVITY = 9.81
GRAVITY_VECTOR = [[0.0], [0.0], [GRAVITY]]
MAX_COVAR = matrix_scale(matrix_identity(6), 9223372036854775807)
MAX_ACC_COVAR = MAX_COVAR[:3]
MAX_MAG_COVAR = MAX_COVAR[3:6]

# Thresholds for error...
# Not sure what they should be yet.
EPSILON_GRAVITY = 0.5
EPSILON_MAGNETIC = 10 
EPSILON_DIP = 1


class UncalibratedError(RepyException):
  """When the device can't load calibration settings"""


class OrientationFilter(ExtendedKalmanFilter):
  def __init__(self):
    calibration = self._load_calibration()
    self._accelerometer_covariance = calibration[2]
    self._magnetometer_covariance = calibration[3]
    self._local_dip = calibration[4]
    ExtendedKalmanFilter.__init__(calibration[0], calibration[1], MAX_COVAR)    


  # Loads precomputed statistics
  # for this device
  def _load_calibration(self):
    try:
      cf = openfile('orientation.calibation', False)
      calibration = serialize_deserializedata(cf.readat(None, 0))
      cf.close()
    except:
      raise UncalibratedError("Failed to load orientation calibration settings for the device!")


  # A "virtual" method that computes the system dynamics,
  # i.e. how the state transitions over time. 
  def _compute_transition_matrix(self, input_matrix, timestep):
    # Compute the matrix describing angular motion,
    # referred to as omega by the literature.
    # Note: a true control vector doesn't apply here,
    # so the gyroscope reading is used instead.
    roll, pitch, yaw = matrix_transpose(input_matrix)[0]
    transition_matrix = quaternion_differentiator(roll, pitch, yaw)
   
    """
    # If gyroscope readings are angular velocities,
    # the exponential is needed for integration. 
    transition_matrix = matrix_exponential_skew_symmetric(matrix_scale(transition_matrix, timestep))  
    """
    # Right now the transition matrix only accounts
    # for the quaternion (orientation), so it is 4x4.
    # However, the accelerometer and magnetometer biases
    # are also included in the state vector, so they must
    # also be accounted for in the transition matrix. Thus,
    # the transition matrix must be extended by a 6x6 (two
    # 3x3 matrices corresponding to the 3 axes of each bias) 
    # identity matrix. 

    # Extra columns in quaternion portion of the transition
    # matrix should all be zero.
    for row in transition_matix:
      row.extend([0.0] * 6)

    # Last six rows of transition matrix apply to biases.
    last_six_rows = matrix_identity(6)
    for identity_row in last_six_rows:
      # First four columns are the quaternion portion,
      # so they should all be zero in the biases portion.
      bias_row = [0.0] * 4
      bias_row.extend(identity_row)
      transition_matrix.append(bias_row)

    return transition_matrix
    

  # A "virtual" method that computes the Jacobian matrix
  # used in computing the a posteriori.
  def _compute_jacobian_matrix(self):
    # The Jacobian is computed by taking the partial
    # derivative of the measurements with respect to
    # the state, evaluated at the a priori.
    #
    # The state vector is 10x1
    # and the measurement vector
    # is 6x1, so the Jacobian is 10x6
    jacobian = matrix_init(10, 6)
    
    # Partial derivative on right
    # 6x6 of Jacobian is Identity. 
    identity = matrix_identity(6)
  
    q = self._get_quaternion()
    q_norm = quaternion_norm(q)

    # Factored partial derivative of 
    # the acceleration with respect to 
    # each component of the state quaternion
    acc = [[q[2], -q[3], q[0], -q[1]], \
           [q[3], q[2], q[1], q[0]], \
           [-q[0], -q[1], q[2], q[3]]]
    # Unfactor before inserting into Jacobian
    acc = matrix_scale(acc, 2 * GRAVITY / q_norm)
    
    # Factored partial derivative of the magnetometer 
    # readings with respect to the state quaternion. 
    mag = [[[q[0], q[2]], [q[1], -q[3]], [q[2], q[0]], [q[3], -q[1]]], \
           [[q[1], -q[3]], [q[0], q[2]], [-q[3], q[1]], [-q[2], -q[0]]], \
           [[q[2], -q[0]], [q[3], -q[1]], [q[0], q[2]], [q[1], q[3]]]]
    # Each vector in mag needs to be mutliplied by the scaled magnetic 
    # field vector before being inserted into the Jacobian. 
    scaled_field = matrix_scale([[self._measurements[3]], [self._measurements[5]]], 2 / q_norm)
    
    for row in range(3):
      # Fill top three Jacobian rows with
      # accelerometer and identity partials
      jacobian[row] = acc[row] + identity[row]
      mag_row = row + 3
      # Fill first four columns of bottom three 
      # Jacobian rows with magnetometer partials
      for col in range(4):
        unfactored_mag = matrix_scale([mag[row][col]], factor)
        jacobian[mag_row][col] = matrix_dot_product(unfactored_mag, scaled_field)
      # Insert identity partials in remaining
      # columns of bottom three rows
      jacobian[mag_row].extend(identity[mag_row]) 

    return jacobian


  # A "virtual" method that computes the
  # measurements we'd expect to see in the
  # absense of noise. 
  def _compute_expected_measurements(self):
    # Measurements are modeled as a rotation of the gravity
    # and magnetic pole vectors + sensor bias + noise.
    # Using the filter's estimates for the rotation and sensor bias,
    # we can isolate the noise in measurements.  

    # Calculate rotations of gravitational and magnetic vectors
    rotation = quaternion_to_matrix(self._get_quaternion())
    rotated_g = matrix_multiply(rotation, GRAVITY_VECTOR)
    rotated_h = matrix_multiply(rotation, [self._measurements[3], 0 self._measurements[5]])

    # Combine rotations into one matrix
    zeros = [0.0] * 3
    matrix = matrix_init(6, 6)
    for row in range(3):
      matrix[row] = rotated_g[row] + zeros
      matrix[row + 3]  = zeros + rotated_h[row]
    # Add biases in state vector to rotations
    return matrix_add(matrix, self._state[4:]) 


  # Adapts the measurement covariance depending on how
  # much the measurements can be trusted to produce an
  # accurate orientation.
  def _adapt_measurement_covariance(self):
    acc = self._measurements[:3]
    acc_norm = matrix_vector_norm(acc)
    # Don't rely on accelerometer
    # until we know it's good.
    acc_covar = MAX_ACC_COVAR
    # Is the phone only under the influence of gravity?
    if abs(acc_norm - GRAVITY) < EPSILON_GRAVITY:
      # Trust accelerometer, use for orienting
      acc_covar = self._accelerometer_covariance
    
    mag = self._measurements[-3:]
    mag_norm = matrix_vector_norm(mag)

    # Rotate measurements from phone to navigational frame
    rotation = quaternion_to_matrix(self._get_quaternion())
    rotated_mag = matrix_multiply(rotation, mag)
    rotated_acc = matrix_multiply(rotation, acc)

    # Calculate the magnetic inclination for validation
    dip = math_acos(matrix_dot_product(rotated_mag, rotated_acc) / (mag_norm * acc_norm))
    # Don't rely on magnetometer
    # until we know it's good.
    mag_covar = MAX_MAG_COVAR
    # Are there no magnetic disturbances in the environment?
    if abs(mag_norm - matrix_vector_norm([mag[0], 0, mag[2]])) < EPSILON_MAGNETIC \
        and abs(dip - self._local_dip) < EPSILON_DIP:
      # Trust magnetometer, use for orienting
      mag_covar = self._magnetometer_covariance

    # Update the measurement covariance based on our findings
    for row in range(3):
      self._measurement_covariance[row] = acc_covar[row]
      self._measurement_covariance[row + 3] = mag_covar[row] 

  
  # Overriding the Kalman gain method because
  # this filter must adapt the measurement covariance
  # after computing the a priori, before the gain.
  def _compute_gain(self, jacobian_matrix):
    self._adapt_measurement_covariance()
    return ExtendedKalman._compute_gain(jacobian_matrix)

    
  def get_orientation(self, sensor_data):
    """
    <Purpose>
      Filters a rotation with respect to the initial orientation 
      from noisy sensor data. 

    <Arguments>
      sensor_data:
                  A dict of raw gyroscope, accelerometer, and 
                  magnetometer data obtained from SL4A. 

    <Exceptions>
      None.

    <Side Effects>
      Updates the state vector and error covariance matrix.

    <Returns>
      A quaternion describing the rotation from the initial orientation
      to the current one.
    """
    # Split sensor data into input and 
    # measurements vectors.
    gyro_vector = [[sensor_data['roll']],
                   [sensor_data['pitch']],
                   [sensor_data['yaw']]]
    measurements = [[sensor_data['xforce']],
                    [sensor_data['yforce']],
                    [sensor_data['zforce']],
                    [sensor_data['xmag']],
                    [sensor_data['ymag']],
                    [sensor_data['zmag']]]
    
    # Run Kalman filter
    self._update(gyro_vector, measurements_vector, sensor_data['time'])
    return self._get_quaternion()

# -*- mode: python;-*-
