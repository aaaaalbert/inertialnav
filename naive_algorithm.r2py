"""

<Program Name>
  inertialnav.r2py

<Purpose>
  This is a script for estimating the position of a person walking
  between two known locations. Sensor data from the GPS, accelerometer,
  gyroscope, and magnetometer are gathered while 
  the acceleration and angular velocity of the device are integrated to
  estimate its position.

  *Note: The device must begin at rest to calibrate the acceleration due
  to gravity.

"""



getsensor = dy_import_module('getsensor.r2py')
dy_import_module_symbols('matrix.r2py')
dy_import_module_symbols('math.r2py')

XYZ = 3
z_axis = [[0], [0], [1]]

lock = createlock()

start = 0

# start all sensors at ~167Hz
getsensor.start_sensing(1, 6)


gsum = [0, 0, 0]
gcnt = 0
# Phone should be stationary
# while calibrating gravity
log('Calibrating gravity...\n')
while gcnt < 100:
  g = getsensor.get_acceleration()
  # add up each component
  for axis in range(XYZ):
    gsum[axis] += g[axis]
  gcnt += 1

# set gravity as the avg for each component
phone_gravity = [[gsum[0]], [gsum[1]], [gsum[2]]]
log('Gravity: ', gravity, '\n')

minus_phone_gravity = matrix_scale(phone_gravity, -1)



# Some sensors start before others, so we
# need to wait until we get one with a timestamp
while 'time' not in getsensor.get_sensors():
  sleep(0.1)

log('Starting...')
# Collect sensor data, but process it in another
# thread so we don't slow down the polling rate. 
while True:
  createthread(process(getsensor.get_sensors()))

  

# processes sensor data to estimate position
def process(sensordata):
  def func():
    # Calculate time step (since last measurement)
    dt = sensordata['time'] - start
    
    # Make sure we didn't poll too fast
    if dt == 0:
      return


    # Store raw sensor data
    phone_acc = [[sensordata['xforce']], [sensordata['yforce']], [sensordata['zforce']]]

    # Other processing threads may be running,
    # so we need to protect the current orientation,
    # position, and initial velocity.
    lock.acquire(True)
    ################################### CRITICAL REGION #######################################

    # remember timestamp for next thread
    start = sensordata['time']

    # Subtract initial angles from Euler angles
    pitch = sensordata['pitch'] - p_init
    roll = sensordata['roll'] - r_init
    yaw = sensordata['azimuth'] - y_init
   
    # Euler rotation matrices for orienting in the phone's frame of reference 
    rotationx = [[1.0, 0.0, 0.0], [0.0, math_cos(pitch), -math_sin(pitch)], [0.0, math_sin(pitch), math_cos(pitch)]]
    rotationy = [[math_cos(roll), 0.0, math_sin(roll)], [0.0, 1.0, 0.0], [-math_sin(roll), 0.0, math_cos(roll)]]
    rotationz = [[math_cos(yaw), -math_sin(yaw), 0.0], [math_sin(yaw), math_cos(yaw), 0.0], [0.0, 0.0, 1.0]]

    # Combined rotation transformation
    rotation = matrix_multiply(matrix_multiply(rotationz, rotationy), rotationx)
    
    # Invert rotation matrix to get phone-to-world transformation
    transform = matrix_inverse(rotation)
    
    # Transform phone acc and gravity to real world coordinates
    acc = matrix_multiply(transform, phone_acc)
    minus_gravity = matrix_multiply(transform, minus_phone_gravity)

    # Subtract gravity from acc for linear acc
    linear_acc = matrix_add(acc, minus_gravity)

    # The heading will be the projection of the 
    # linear acc onto the x-y plane. This means
    # taking the cross product of a vector normal to
    # the x-y plane, or trivially the z-axis, with 
    # the linear acc vector, and then crossing the
    # result once more with the z-axis.
    #
    # The linear acc must be normalized first   
    acc_norm = matrix_vector_norm(linear_acc)
    unit_acc = matrix_scale(linear_acc, 1.0 / acc_norm)
    # Calculate heading vector
    heading = matrix_vector_cross_product(matrix_vector_cross_product(z_axis,  unit_acc), z_axis)
    # The magnitude of the heading is the magnitude of the linear acc
    # times the sin of the angle between the linear acc and the z axis 
    sin_theta = (1 - ((matrix_vector_dot_product(unit_acc, z_axis) / acc_norm) ** 2)) ** 0.5
    heading = matrix_scale(heading, acc_norm * sin_theta)

    ################################# ENDOF CRITICAL REGION ###################################
    lock.release()

  return func

# -*- mode: python;-*-
